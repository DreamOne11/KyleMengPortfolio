# Backend - Spring Boot + Java Rules

## 技术栈
- Java 17+
- Spring Boot 3.x
- Spring Security
- Spring Data JPA
- PostgreSQL
- Maven
- Docker

## 项目结构约定
```
src/main/java/com/portfolio/
├── controller/        # REST控制器
├── service/          # 业务逻辑层
├── repository/       # 数据访问层
├── entity/           # JPA实体类
├── dto/              # 数据传输对象
├── config/           # 配置类
├── security/         # 安全相关
├── exception/        # 异常处理
└── utils/            # 工具类

src/main/resources/
├── application.yml   # 配置文件
├── application-dev.yml
├── application-prod.yml
└── db/migration/     # 数据库迁移脚本
```

## Java 开发规范

### 命名约定
- 类名：PascalCase (UserController)
- 方法名：camelCase (getUserById)  
- 常量：UPPER_SNAKE_CASE (MAX_RETRY_COUNT)
- 包名：小写+点分隔 (com.portfolio.service)

### 代码规范
- 每行代码不超过120字符
- 使用4个空格缩进
- 类和方法添加JavaDoc注释
- 异常处理使用具体异常类型
- 避免使用裸露的基本类型

## Spring Boot 规范

### 控制器 (Controller)
- 使用 @RestController 注解
- 统一的请求映射前缀
- 使用 @Valid 进行参数验证
- 返回统一的响应格式
- 记录请求日志

### 服务层 (Service)
- 接口与实现分离
- 使用 @Service 注解
- 事务边界在服务层
- 业务逻辑验证
- 异常转换和处理

### 数据访问层 (Repository)
- 继承 JpaRepository
- 自定义查询使用 @Query
- 分页查询支持
- 数据库事务管理
- 软删除支持

### 实体类 (Entity)
- 使用 JPA 注解
- 实现 equals() 和 hashCode()
- 使用合适的生成策略
- 字段验证注解
- 审计字段（创建时间、修改时间）

## 数据传输对象 (DTO)

### DTO 设计原则
- 请求和响应分离
- 使用验证注解
- 避免循环引用
- 实现序列化接口
- 提供无参构造函数

## 配置管理

### 应用配置
- 使用 YAML 格式
- 环境变量外部化
- 敏感信息加密
- 配置分组管理
- 默认值设置

### 数据库配置
- 连接池配置优化
- 事务超时设置
- SQL 日志配置
- 性能监控
- 数据源健康检查

## 安全规范

### Spring Security
- JWT 令牌认证
- 角色权限控制
- CORS 跨域配置
- CSRF 防护
- 密码加密存储

### API 安全
- 请求限流
- 参数验证
- SQL 注入防护
- XSS 攻击防护
- 敏感数据脱敏

## 异常处理

### 统一异常处理
- 全局异常处理器
- 自定义业务异常
- 错误码标准化
- 国际化错误消息
- 异常日志记录

## 测试策略

### 单元测试
- 使用 JUnit 5
- Mock 外部依赖
- 测试覆盖率 > 80%
- 测试数据隔离
- 断言明确具体

### 集成测试
- @SpringBootTest 注解
- 测试数据库隔离
- API 端到端测试
- 事务回滚
- 测试配置文件

## 代码示例模板

### Controller 模板
```java
@RestController
@RequestMapping("/api/v1/users")
@Validated
@Slf4j
public class UserController {
    
    private final UserService userService;
    
    public UserController(UserService userService) {
        this.userService = userService;
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<UserDTO>> getUserById(
            @PathVariable @Min(1) Long id) {
        UserDTO user = userService.findById(id);
        return ResponseEntity.ok(ApiResponse.success(user));
    }
}
```

### Service 模板
```java
@Service
@Transactional(readOnly = true)
@Slf4j
public class UserServiceImpl implements UserService {
    
    private final UserRepository userRepository;
    
    public UserServiceImpl(UserRepository userRepository) {
        this.userRepository = userRepository;
    }
    
    @Override
    public UserDTO findById(Long id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new UserNotFoundException("User not found: " + id));
        return UserMapper.toDTO(user);
    }
}
```

### Entity 模板
```java
@Entity
@Table(name = "users")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class User {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false, unique = true)
    private String email;
    
    @CreatedDate
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;
    
    @LastModifiedDate
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;
}
``` 