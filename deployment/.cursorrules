# Deployment - Docker & DevOps Rules

## 部署技术栈
- Docker & Docker Compose
- PostgreSQL Database
- Nginx (反向代理)
- CI/CD Pipeline
- 云服务部署

## 项目结构约定
```
deployment/
├── docker/
│   ├── frontend/
│   │   └── Dockerfile
│   ├── backend/
│   │   └── Dockerfile
│   └── nginx/
│       ├── Dockerfile
│       └── nginx.conf
├── docker-compose.yml
├── docker-compose.prod.yml
├── .env.example
├── scripts/
│   ├── build.sh
│   ├── deploy.sh
│   └── backup.sh
└── k8s/              # Kubernetes配置（可选）
    ├── namespace.yml
    ├── deployments/
    └── services/
```

## Docker 规范

### Dockerfile 最佳实践
- 使用多阶段构建
- 最小化镜像层数
- 使用 .dockerignore
- 非root用户运行
- 健康检查配置

### 前端 Dockerfile 模板
```dockerfile
# 构建阶段
FROM node:18-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

# 生产阶段
FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
COPY deployment/docker/nginx/nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

### 后端 Dockerfile 模板
```dockerfile
# 构建阶段
FROM maven:3.9-openjdk-17 AS builder
WORKDIR /app
COPY pom.xml .
RUN mvn dependency:go-offline

COPY src ./src
RUN mvn clean package -DskipTests

# 生产阶段
FROM openjdk:17-jre-slim
RUN adduser --system --group appuser
WORKDIR /app
COPY --from=builder /app/target/*.jar app.jar
RUN chown appuser:appuser app.jar
USER appuser
EXPOSE 8080
HEALTHCHECK --interval=30s --timeout=3s --retries=3 \
  CMD curl -f http://localhost:8080/actuator/health || exit 1
CMD ["java", "-jar", "app.jar"]
```

## Docker Compose 规范

### 开发环境配置
```yaml
version: '3.8'
services:
  frontend:
    build:
      context: ../frontend
      dockerfile: ../deployment/docker/frontend/Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - backend
    
  backend:
    build:
      context: ../backend
      dockerfile: ../deployment/docker/backend/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - DATABASE_URL=jdbc:postgresql://postgres:5432/portfolio
    depends_on:
      - postgres
    
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: portfolio
      POSTGRES_USER: portfolio_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

volumes:
  postgres_data:
```

## 环境配置管理

### 环境变量规范
- 敏感信息使用环境变量
- 提供 .env.example 模板
- 不同环境使用不同配置文件
- 配置验证和默认值
- 加密敏感配置

### .env.example 模板
```bash
# Database Configuration
DB_PASSWORD=your_secure_password
DB_HOST=localhost
DB_PORT=5432
DB_NAME=portfolio

# JWT Configuration
JWT_SECRET=your_jwt_secret_key
JWT_EXPIRATION=86400

# Email Configuration
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your_email@gmail.com
SMTP_PASSWORD=your_app_password

# Storage Configuration
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_S3_BUCKET=your-s3-bucket

# Monitoring
SENTRY_DSN=your_sentry_dsn
```

## Nginx 配置

### 反向代理配置
```nginx
server {
    listen 80;
    server_name localhost;

    # Frontend
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }

    # Backend API
    location /api/ {
        proxy_pass http://backend:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 静态资源缓存
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}
```

## CI/CD 流水线

### GitHub Actions 工作流
```yaml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Frontend Tests
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: cd frontend && npm ci
      - run: cd frontend && npm run test
      
      # Backend Tests
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - run: cd backend && mvn test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to Production
        run: ./deployment/scripts/deploy.sh
```

## 监控和日志

### 应用监控
- 健康检查端点
- 性能指标收集
- 错误监控和告警
- 资源使用监控
- 用户行为分析

### 日志管理
- 结构化日志格式
- 日志级别控制
- 敏感信息脱敏
- 日志轮转和归档
- 集中化日志收集

## 安全配置

### 容器安全
- 非root用户运行
- 最小权限原则
- 定期更新基础镜像
- 镜像安全扫描
- 运行时安全监控

### 网络安全
- HTTPS 强制跳转
- 安全头配置
- 防火墙规则
- VPN 访问控制
- DDoS 防护

## 备份和恢复

### 数据备份策略
- 定期数据库备份
- 增量备份支持
- 跨区域备份
- 备份验证测试
- 快速恢复流程

### 灾难恢复
- RTO/RPO 定义
- 故障转移机制
- 数据一致性检查
- 恢复演练计划
- 文档化流程 